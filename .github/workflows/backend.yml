name: Backend CI/CD

on:
  push:
    branches:
      - main
      - deploy/production

env:
  GITHUB_REF_MAIN: refs/heads/main
  GITHUB_REF_DEPLOY_PRODUCTION: refs/heads/deploy/production
  HOST: 18.204.164.224
  BACKEND_PORT: 3000
  DATABASE_PORT: 5432
  SONARQUBE_PORT: 9000
  JENKINS_PORT: 9090

jobs:
  linting:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/deploy/production'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install
        working-directory: ./backend

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
          SONAR_HOST_URL: http://${{ env.HOST }}:${{ env.SONARQUBE_PORT }}
        with:
          projectBaseDir: ./backend
          args: >
            -Dsonar.projectKey=secret-notes-backend

      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Authenticate with Snyk
        run: snyk auth ${{ secrets.SNYK_TOKEN }}

      - name: Snyk Test (Code & Dependencies)
        working-directory: ./backend
        run: snyk test --all-projects
  
  test:
    needs: linting
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/deploy/production'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install
        working-directory: ./backend

      - name: Run tests
        run: npm test -- --watchAll=false
        working-directory: ./backend
  
  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/deploy/production'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: false
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/secret-notes-backend:latest

  deliver:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/deploy/production'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/secret-notes-backend:latest

  get-next-env:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/deploy/production'
    outputs:
      NEXT_ENV: ${{ steps.set-next-env.outputs.NEXT_ENV }}
    steps:
      - name: Get next environment from nginx.conf
        id: setenv
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ env.HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            ACTIVE_ENV=$(grep -oE 'set \$?active_env[[:space:]]*["'\''](blue|green)' /etc/nginx/conf.d/secret-notes.conf | grep -oE '(blue|green)')
            echo "[DEBUG] NGINX LINE: $(grep active_env /etc/nginx/conf.d/secret-notes.conf)"
            echo "[DEBUG] Detected ACTIVE_ENV: $ACTIVE_ENV"
            if [ "$ACTIVE_ENV" = "blue" ]; then
              echo "green" > /tmp/next_env.txt
            elif [ "$ACTIVE_ENV" = "green" ]; then
              echo "blue" > /tmp/next_env.txt
            else
              echo "[ERROR] Invalid ACTIVE_ENV: $ACTIVE_ENV" >&2
              exit 1
            fi
      - name: Write SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > id_rsa
          chmod 600 id_rsa
      - name: Debug List /tmp files
        run: |
          ssh -o StrictHostKeyChecking=no -i ./id_rsa ubuntu@${{ env.HOST }} "ls -l /tmp"
      - name: Make next_env.txt world-readable
        run: |
          ssh -o StrictHostKeyChecking=no -i ./id_rsa ubuntu@${{ env.HOST }} "chmod 644 /tmp/next_env.txt"
      - name: Debug print next_env.txt
        run: |
          ssh -o StrictHostKeyChecking=no -i ./id_rsa ubuntu@${{ env.HOST }} "cat /tmp/next_env.txt || echo 'File not found'"
      - name: Copy next_env.txt to home directory
        run: |
          ssh -o StrictHostKeyChecking=no -i ./id_rsa ubuntu@${{ env.HOST }} "cp /tmp/next_env.txt /home/ubuntu/next_env.txt && chmod 644 /home/ubuntu/next_env.txt"
      - name: Debug print next_env.txt in home directory
        run: |
          ssh -o StrictHostKeyChecking=no -i ./id_rsa ubuntu@${{ env.HOST }} "cat /home/ubuntu/next_env.txt || echo 'File not found'"
      - name: Download next_env.txt
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ env.HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          source: /home/ubuntu/next_env.txt
          target: .
          strip_components: false
          debug: true
          tar_tmp_path: /tmp
      - name: Set NEXT_ENV output
        id: set-next-env
        run: |
          NEXT_ENV=$(cat ./next_env.txt | grep -E '^(blue|green)$' | tr -d '\n' | xargs)
          echo "[DEBUG] Downloaded NEXT_ENV: '$NEXT_ENV'"
          if [[ "$NEXT_ENV" != "blue" && "$NEXT_ENV" != "green" ]]; then
            echo "[ERROR] NEXT_ENV is not blue or green: '$NEXT_ENV'" >&2
            exit 1
          fi
          echo "NEXT_ENV=$NEXT_ENV" >> $GITHUB_OUTPUT

  deploy:
    needs: [deliver, get-next-env]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/deploy/production'
    strategy:
      matrix:
        include:
          - ENVIRONMENT: ${{ needs.get-next-env.outputs.NEXT_ENV }}
    steps:
      - name: Deploy to EC2 via SSH (${{ matrix.ENVIRONMENT }})
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ env.HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            if [ "${{ matrix.ENVIRONMENT }}" = "blue" ]; then
              PORT=3000
              NAME=secret-notes-backend-blue
            else
              PORT=3100
              NAME=secret-notes-backend-green
            fi
            docker network create secret-notes-network || true
            docker rm -f $NAME || true
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/secret-notes-backend:latest
            docker run -d --rm \
              --name $NAME \
              --network secret-notes-network \
              --network-alias backend-${{ matrix.ENVIRONMENT }} \
              -e NODE_ENV=production \
              -e NODE_TLS_REJECT_UNAUTHORIZED=0 \
              -e DATABASE_URL=postgres://postgres:postgres@secret-notes-db.ci4bvrmai3fb.us-east-1.rds.amazonaws.com:${{ env.DATABASE_PORT }}/secret_notes?sslmode=require \
              -p $PORT:3000 \
              ${{ secrets.DOCKERHUB_USERNAME }}/secret-notes-backend:latest

  notify-on-failure:
    needs: [ linting, test, build, deliver, deploy]
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Send Slack Notification
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{
            "text": "*CI/CD Pipeline Failed!*\n*Pipeline failed for* `${{ github.repository }}` on branch `${{ github.ref_name }}`\n*Workflow:* `${{ github.workflow }}`\n*Commit:* `${{ github.event.head_commit.message }}`\n*Author:* `${{ github.event.head_commit.author.name }}`\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Logs>"
          }' ${{ secrets.SLACK_WEBHOOK_URL }}
