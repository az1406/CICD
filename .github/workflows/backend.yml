name: Backend CI/CD

on:
  push:
    branches:
      - main
      - deploy/production

env:
  GITHUB_REF_MAIN: refs/heads/main
  GITHUB_REF_DEPLOY_PRODUCTION: refs/heads/deploy/production
  HOST: 18.204.164.224
  BACKEND_PORT: 3000
  DATABASE_PORT: 5432
  SONARQUBE_PORT: 9000
  JENKINS_PORT: 9090

jobs:
  linting:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/deploy/production'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install
        working-directory: ./backend

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
          SONAR_HOST_URL: http://${{ env.HOST }}:${{ env.SONARQUBE_PORT }}
        with:
          projectBaseDir: ./backend
          args: >
            -Dsonar.projectKey=secret-notes-backend

      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Authenticate with Snyk
        run: snyk auth ${{ secrets.SNYK_TOKEN }}

      - name: Snyk Test (Code & Dependencies)
        working-directory: ./backend
        run: snyk test --all-projects

  test:
    needs: linting
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/deploy/production'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install
        working-directory: ./backend

      - name: Run tests
        run: npm test -- --watchAll=false
        working-directory: ./backend

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/deploy/production'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: false
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/secret-notes-backend:latest

  deliver:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/deploy/production'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/secret-notes-backend:latest

  deploy:
    needs: deliver
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/deploy/production'
    env:
      DEPLOY_ENV: ${{ github.event.inputs.environment }}
    steps:
      - name: Deploy to EC2 via SSH (${{ env.DEPLOY_ENV }})
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ env.HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            if [ "${{ env.DEPLOY_ENV }}" = "blue" ]; then
              PORT=3000
              NAME=secret-notes-backend-blue
            else
              PORT=3100
              NAME=secret-notes-backend-green
            fi
            docker network create secret-notes-network || true
            docker rm -f $NAME || true
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/secret-notes-backend:latest
            docker run -d --rm \
              --name $NAME \
              --network secret-notes-network \
              --network-alias backend-${{ env.DEPLOY_ENV }} \
              -e NODE_ENV=production \
              -e NODE_TLS_REJECT_UNAUTHORIZED=0 \
              -e DATABASE_URL=postgres://postgres:postgres@secret-notes-db.ci4bvrmai3fb.us-east-1.rds.amazonaws.com:${{ env.DATABASE_PORT }}/secret_notes?sslmode=require \
              -p $PORT:3000 \
              ${{ secrets.DOCKERHUB_USERNAME }}/secret-notes-backend:latest

      - name: Switch active environment on server
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ env.HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo /usr/local/bin/switch_env.sh ${{ env.DEPLOY_ENV }}
      

  notify-on-failure:
    needs: [linting, test, build, deliver, deploy]
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Send Slack Notification
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{
            "text": "*CI/CD Pipeline Failed!*\n*Pipeline failed for* `${{ github.repository }}` on branch `${{ github.ref_name }}`\n*Workflow:* `${{ github.workflow }}`\n*Commit:* `${{ github.event.head_commit.message }}`\n*Author:* `${{ github.event.head_commit.author.name }}`\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Logs>"
          }' ${{ secrets.SLACK_WEBHOOK_URL }}
