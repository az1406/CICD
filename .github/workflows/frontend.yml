name: Frontend CI/CD

on:
  push:
    branches:
      - main
      - deploy/production

jobs:
  linting:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/deploy/production'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install
        working-directory: ./frontend

      - name: SonarQube Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
          SONAR_HOST_URL: http://18.204.164.224:9000
        with:
          projectBaseDir: ./frontend
          args: >
            -Dsonar.projectKey=secret-notes-frontend

      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Authenticate with Snyk
        run: snyk auth ${{ secrets.SNYK_TOKEN }}

      - name: Snyk Test (Code & Dependencies)
        working-directory: ./frontend
        run: snyk test --all-projects

  test:
        needs: linting
        runs-on: ubuntu-latest
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/deploy/production'
        steps:
          - name: Checkout code
            uses: actions/checkout@v3

          - name: Set up Node.js
            uses: actions/setup-node@v3
            with:
              node-version: '18'

          - name: Install dependencies
            run: npm install
            working-directory: ./frontend

          - name: Run tests
            run: npm test
            working-directory: ./frontend

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/deploy/production'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: false
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/secret-notes-frontend:latest

  deliver:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/deploy/production'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/secret-notes-frontend:latest

  deploy:
    needs: deliver
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/deploy/production'
    steps:
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: 18.204.164.224
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker network create secret-notes-network || true
            docker rm -f secret-notes-frontend || true
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/secret-notes-frontend:latest
            docker run -d \
              --name secret-notes-frontend \
              --network secret-notes-network \
              -e NODE_ENV=production \
              -p 8080:80 \
              ${{ secrets.DOCKERHUB_USERNAME }}/secret-notes-frontend:latest

  performance-test:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/deploy/production'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Pull k6 Docker image
        run: docker pull grafana/k6:1.1.0

      - name: Wait for application to be ready
        run: |
          echo "Waiting for application to be ready..."
          for i in {1..15}; do  # Reduced from 30 to 15 attempts
            if curl -f http://18.204.164.224:8080/api/health; then
              echo "Application is ready!"
              break
            fi
            echo "Attempt $i: Application not ready yet, waiting..."
            sleep 5  # Reduced from 10 to 5 seconds
          done

      - name: Run k6 Smoke Tests (30s)
        run: |
          docker run --rm -v "$PWD/frontend/__tests__/k6:/app" grafana/k6:1.1.0 \
            run --env BASE_URL=http://18.204.164.224:8080 /app/smoke-test.js

      - name: Run k6 Performance Tests (30s)
        run: |
          docker run --rm -v "$PWD/frontend/__tests__/k6:/app" grafana/k6:1.1.0 \
            run --env BASE_URL=http://18.204.164.224:8080 /app/performance-tests.js

      - name: Run k6 Load Tests (1m)
        run: |
          docker run --rm -v "$PWD/frontend/__tests__/k6:/app" grafana/k6:1.1.0 \
            run --env BASE_URL=http://18.204.164.224:8080 /app/load-test.js

      - name: Cleanup test data
        run: |
          curl -X DELETE http://18.204.164.224:8080/api/test-data || echo "Cleanup failed or not available"