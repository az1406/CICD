name: Frontend CI/CD

on:
  push:
    branches:
      - main
      - deploy/production

env:
  GITHUB_REF_MAIN: refs/heads/main
  GITHUB_REF_DEPLOY_PRODUCTION: refs/heads/deploy/production
  HOST: 18.204.164.224
  FRONTEND_PORT: 8080
  SONARQUBE_PORT: 9000
  JENKINS_PORT: 9090

jobs:
  linting:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/deploy/production'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install
        working-directory: ./frontend

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
          SONAR_HOST_URL: http://${{ env.HOST }}:${{ env.SONARQUBE_PORT }}
        with:
          projectBaseDir: ./frontend
          args: >
            -Dsonar.projectKey=secret-notes-frontend

      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Authenticate with Snyk
        run: snyk auth ${{ secrets.SNYK_TOKEN }}

      - name: Snyk Test (Code & Dependencies)
        working-directory: ./frontend
        run: snyk test --all-projects

  test:
        needs: linting
        runs-on: ubuntu-latest
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/deploy/production'
        steps:
          - name: Checkout code
            uses: actions/checkout@v3

          - name: Set up Node.js
            uses: actions/setup-node@v3
            with:
              node-version: '18'

          - name: Install dependencies
            run: npm install
            working-directory: ./frontend

          - name: Run tests
            run: npm test
            working-directory: ./frontend

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/deploy/production'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: false
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/secret-notes-frontend:latest

  deliver:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/deploy/production'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/secret-notes-frontend:latest

  get-next-env:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/deploy/production'
    outputs:
      NEXT_ENV: ${{ steps.set-next-env.outputs.NEXT_ENV }}
    steps:
      - name: Get next environment from nginx.conf
        id: setenv
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ env.HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            ACTIVE_ENV=$(grep -Po 'set \$active_env "\K(blue|green)' /etc/nginx/conf.d/secret-notes.conf)
            echo "[DEBUG] Detected ACTIVE_ENV: $ACTIVE_ENV"
            if [ "$ACTIVE_ENV" = "blue" ]; then
              echo "green" > /tmp/next_env.txt
            elif [ "$ACTIVE_ENV" = "green" ]; then
              echo "blue" > /tmp/next_env.txt
            else
              echo "[ERROR] Invalid ACTIVE_ENV: $ACTIVE_ENV" >&2
              exit 1
            fi
      - name: Debug: List /tmp files
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ env.HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            ls -l /tmp
      - name: Download next_env.txt
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ env.HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          source: /tmp/next_env.txt
          target: ./next_env.txt
      - name: Set NEXT_ENV output
        id: set-next-env
        run: |
          NEXT_ENV=$(cat ./next_env.txt | grep -E '^(blue|green)$' | tr -d '\n' | xargs)
          echo "[DEBUG] Downloaded NEXT_ENV: '$NEXT_ENV'"
          if [[ "$NEXT_ENV" != "blue" && "$NEXT_ENV" != "green" ]]; then
            echo "[ERROR] NEXT_ENV is not blue or green: '$NEXT_ENV'" >&2
            exit 1
          fi
          echo "NEXT_ENV=$NEXT_ENV" >> $GITHUB_OUTPUT

  deploy:
    needs: [deliver, get-next-env]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/deploy/production'
    strategy:
      matrix:
        include:
          - ENVIRONMENT: ${{ needs.get-next-env.outputs.NEXT_ENV }}
    steps:
      - name: Deploy to EC2 via SSH (${{ matrix.ENVIRONMENT }})
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ env.HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            if [ "${{ matrix.ENVIRONMENT }}" = "blue" ]; then
              PORT=8080
              NAME=secret-notes-frontend-blue
              BACKEND_PORT=3000
            else
              PORT=8180
              NAME=secret-notes-frontend-green
              BACKEND_PORT=3100
            fi
            docker network create secret-notes-network || true
            docker rm -f $NAME || true
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/secret-notes-frontend:latest
            docker run -d --rm \
              --name $NAME \
              --network secret-notes-network \
              --network-alias frontend-${{ matrix.ENVIRONMENT }} \
              -e NODE_ENV=production \
              -e BACKEND_PORT=$BACKEND_PORT \
              -p $PORT:80 \
              ${{ secrets.DOCKERHUB_USERNAME }}/secret-notes-frontend:latest

  e2e-performance-test:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/deploy/production'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Pull k6 Docker image
        run: docker pull grafana/k6:1.1.0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install frontend dependencies
        run: npm install
        working-directory: ./frontend

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
        working-directory: ./frontend

      - name: Wait for application to be ready
        run: |
          echo "Waiting for application to be ready..."
          for i in {1..15}; do
            if curl -f http://${{ env.HOST }}/api/health; then
              echo "Application is ready!"
              break
            fi
            echo "Attempt $i: Application not ready yet, waiting..."
            sleep 5
          done

      - name: Run k6 Smoke Tests
        run: |
          docker run --rm -v "$PWD/frontend/__tests__/k6:/app" grafana/k6:1.1.0 \
            run --env BASE_URL=http://${{ env.HOST }} /app/smoke-test.js

      - name: Run k6 Performance Tests
        run: |
          docker run --rm -v "$PWD/frontend/__tests__/k6:/app" grafana/k6:1.1.0 \
            run --env BASE_URL=http://${{ env.HOST }} /app/performance-tests.js

      - name: Run k6 Load Tests
        run: |
          docker run --rm -v "$PWD/frontend/__tests__/k6:/app" grafana/k6:1.1.0 \
            run --env BASE_URL=http://${{ env.HOST }} /app/load-test.js

      - name: Run Playwright E2E tests
        run: npx playwright test __tests__/e2e
        working-directory: ./frontend
        env:
          E2E_BASE_URL: http://${{ env.HOST }}
      
      - name: Cleanup test data
        if: always()
        run: |
          curl -X DELETE http://${{ env.HOST }}/api/test-data || echo "Cleanup failed or not available"

  notify-on-failure:
    needs: [linting, test, build, deliver, deploy, e2e-performance-test]
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Send Slack Notification
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{
            "text": "*CI/CD Pipeline Failed!*\n*Pipeline failed for* `${{ github.repository }}` on branch `${{ github.ref_name }}`\n*Workflow:* `${{ github.workflow }}`\n*Commit:* `${{ github.event.head_commit.message }}`\n*Author:* `${{ github.event.head_commit.author.name }}`\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Logs>"
          }' ${{ secrets.SLACK_WEBHOOK_URL }}